name: front-eel-build
on:
  create:
    tags:
      - v*.*.*
jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}

  release:  # job_id
    name: front-build
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Install node dependencies and build
        run: |
          cd front
          npm install
          npm run build
          cd ..
      - name: Remove files and dir
        if: ${{ runner.os  != 'Windows' }}
        run: |
          cd front
          rm -rf node_modules/ package* public/ src/ vue.config.js babel.config.js index.html
          cd ..
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: eel build
        run: |
          python -m eel gui.py front --onefile --noconsole --hidden-import pkg_resources.py2_warn -n minenohara-dic --add-data db/ejdict.sqlite3:db --version-file version.txt
          zip -r minenohara-dic.zip dist/
      - name: Upload Release Asset Linux
        id: upload-release-asset-Linux
        if: ${{ runner.os  == 'Linux' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} 
          asset_path: ./minenohara-dic.zip
          asset_name: minenohara-dic-linux.zip
          asset_content_type: application/x-elf
      - name: Upload Release Asset Mac
        id: upload-release-asset-Mac
        if: ${{ runner.os  == 'macOS' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} 
          asset_path: ./minenohara-dic.zip
          asset_name: minenohara-dic-macos.zip
          asset_content_type: application/octet-stream
      - name: Upload Release Asset Windows
        id: upload-release-asset-Windows
        if: ${{ runner.os  == 'Windows' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} 
          asset_path: ./minenohara-dic.zip
          asset_name: minenohara-dic-win.zip
          asset_content_type: application/octet-stream
